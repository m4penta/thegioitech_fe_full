{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mac/Documents/\\u0110o\\u0302\\u0300 a\\u0301n to\\u0302\\u0301t nghie\\u0323\\u0302p/\\u0110O\\u0302\\u0300 A\\u0301N/FE/thegioitech_fe_full/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mac/Documents/\\u0110o\\u0302\\u0300 a\\u0301n to\\u0302\\u0301t nghie\\u0323\\u0302p/\\u0110O\\u0302\\u0300 A\\u0301N/FE/thegioitech_fe_full/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Users/mac/Documents/\\u0110o\\u0302\\u0300 a\\u0301n to\\u0302\\u0301t nghie\\u0323\\u0302p/\\u0110O\\u0302\\u0300 A\\u0301N/FE/thegioitech_fe_full/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _defineProperty from \"/Users/mac/Documents/\\u0110o\\u0302\\u0300 a\\u0301n to\\u0302\\u0301t nghie\\u0323\\u0302p/\\u0110O\\u0302\\u0300 A\\u0301N/FE/thegioitech_fe_full/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/mac/Documents/\\u0110o\\u0302\\u0300 a\\u0301n to\\u0302\\u0301t nghie\\u0323\\u0302p/\\u0110O\\u0302\\u0300 A\\u0301N/FE/thegioitech_fe_full/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/mac/Documents/\\u0110o\\u0302\\u0300 a\\u0301n to\\u0302\\u0301t nghie\\u0323\\u0302p/\\u0110O\\u0302\\u0300 A\\u0301N/FE/thegioitech_fe_full/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\nvar isDateObject = function isDateObject(data) {\n  return data instanceof Date;\n};\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n};\nvar getEventValue = function getEventValue(event) {\n  return isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n};\nvar getNodeParentName = function getNodeParentName(name) {\n  return name.substring(0, name.search(/.\\d/)) || name;\n};\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return getNodeParentName(name) === current;\n  });\n};\nvar compact = function compact(value) {\n  return (value || []).filter(Boolean);\n};\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\nvar get = function get(obj, path, defaultValue) {\n  if (isObject(obj) && path) {\n    var result = compact(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n      return isNullOrUndefined(result) ? result : result[key];\n    }, obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = function omit(source, key) {\n  var copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nvar HookFormContext = React.createContext(null);\nvar useFormContext = function useFormContext() {\n  return React.useContext(HookFormContext);\n};\nvar FormProvider = function FormProvider(props) {\n  return React.createElement(HookFormContext.Provider, {\n    value: omit(props, 'children')\n  }, props.children);\n};\nvar getProxyFormState = function getProxyFormState(formState, _proxyFormState, localProxyFormState) {\n  var isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  function createGetter(prop) {\n    return function () {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n  var result = {};\n  for (var key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n  return result;\n};\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\nvar shouldRenderFormState = function shouldRenderFormState(formStateData, _proxyFormState, isRoot) {\n  var formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(function (key) {\n    return _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all);\n  });\n};\nvar convertToArrayPayload = function convertToArrayPayload(value) {\n  return Array.isArray(value) ? value : [value];\n};\nvar shouldSubscribeByName = function shouldSubscribeByName(name, signalName, exact) {\n  return exact && signalName ? name === signalName : !name || !signalName || name === signalName || convertToArrayPayload(name).some(function (currentName) {\n    return currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName));\n  });\n};\nfunction useSubscribe(props) {\n  var _props = React.useRef(props);\n  _props.current = props;\n  React.useEffect(function () {\n    var tearDown = function tearDown(subscription) {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n    var subscription = !props.disabled && _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n    return function () {\n      return tearDown(subscription);\n    };\n  }, [props.disabled]);\n}\nfunction useFormState(props) {\n  var methods = useFormContext();\n  var _ref = props || {},\n    _ref$control = _ref.control,\n    control = _ref$control === void 0 ? methods.control : _ref$control,\n    disabled = _ref.disabled,\n    name = _ref.name,\n    exact = _ref.exact;\n  var _React$useState = React.useState(control._formState),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    formState = _React$useState2[0],\n    updateFormState = _React$useState2[1];\n  var _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  var _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    callback: function callback(value) {\n      return shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), value));\n    },\n    subject: control._subjects.state\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\nvar generateWatchOutput = function generateWatchOutput(names, _names, formValues, isGlobal) {\n  var isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n  if (isArray) {\n    return names.map(function (fieldName) {\n      return isGlobal && _names.watch.add(fieldName), get(formValues, fieldName);\n    });\n  }\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\nvar objectHasFunction = function objectHasFunction(data) {\n  for (var key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\nfunction useWatch(props) {\n  var methods = useFormContext();\n  var _ref2 = props || {},\n    _ref2$control = _ref2.control,\n    control = _ref2$control === void 0 ? methods.control : _ref2$control,\n    name = _ref2.name,\n    defaultValue = _ref2.defaultValue,\n    disabled = _ref2.disabled,\n    exact = _ref2.exact;\n  var _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled: disabled,\n    subject: control._subjects.watch,\n    callback: function callback(formState) {\n      if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n        var fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n        updateValue(isUndefined(_name.current) || isObject(fieldValues) && !objectHasFunction(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? _toConsumableArray(fieldValues) : fieldValues);\n      }\n    }\n  });\n  var _React$useState3 = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    value = _React$useState4[0],\n    updateValue = _React$useState4[1];\n  React.useEffect(function () {\n    control._removeUnmounted();\n  });\n  return value;\n}\nfunction useController(props) {\n  var methods = useFormContext();\n  var name = props.name,\n    _props$control = props.control,\n    control = _props$control === void 0 ? methods.control : _props$control,\n    shouldUnregister = props.shouldUnregister;\n  var isArrayField = isNameInFieldArray(control._names.array, name);\n  var value = useWatch({\n    control: control,\n    name: name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n    exact: !isArrayField\n  });\n  var formState = useFormState({\n    control: control,\n    name: name\n  });\n  var _name = React.useRef(name);\n  _name.current = name;\n  var registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value: value\n  }));\n  React.useEffect(function () {\n    var updateMounted = function updateMounted(name, value) {\n      var field = get(control._fields, name);\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n    updateMounted(name, true);\n    return function () {\n      var _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n      if (isArrayField ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name, {\n          keepDefaultValue: true\n        });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n  return {\n    field: {\n      onChange: function onChange(event) {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: function onBlur() {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name: name,\n      value: value,\n      ref: function ref(elm) {\n        var field = get(control._fields, name);\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: function focus() {\n              return elm.focus();\n            },\n            setCustomValidity: function setCustomValidity(message) {\n              return elm.setCustomValidity(message);\n            },\n            reportValidity: function reportValidity() {\n              return elm.reportValidity();\n            }\n          };\n        }\n      }\n    },\n    formState: formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nvar Controller = function Controller(props) {\n  return props.render(useController(props));\n};\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  return validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n    types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), _defineProperty({}, type, message || true))\n  }) : {};\n};\nvar isKey = function isKey(value) {\n  return /^\\w*$/.test(value);\n};\nvar stringToPath = function stringToPath(input) {\n  return compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n};\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nvar focusFieldBy = function focusFieldBy(fields, callback, fieldsNames) {\n  var _iterator = _createForOfIteratorHelper(fieldsNames || Object.keys(fields)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var field = get(fields, key);\n      if (field) {\n        var _f = field._f;\n        var current = omit(field, '_f');\n        if (_f && callback(_f.name)) {\n          if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n            break;\n          } else if (_f.refs) {\n            _f.refs[0].focus();\n            break;\n          }\n        } else if (isObject(current)) {\n          focusFieldBy(current, callback);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nvar getFocusFieldName = function getFocusFieldName(name, index) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || \"\".concat(name, \".\").concat(isUndefined(options.focusIndex) ? index : options.focusIndex, \".\") : '';\n};\nvar isWatched = function isWatched(name, _names, isBlurEvent) {\n  return !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _toConsumableArray(_names.watch).some(function (watchName) {\n    return name.startsWith(watchName) && /^\\.\\w+/.test(name.slice(watchName.length));\n  }));\n};\nvar mapCurrentIds = function mapCurrentIds(values, _fieldIds, keyName) {\n  return values.map(function (value, index) {\n    var output = _fieldIds.current[index];\n    return Object.assign(Object.assign({}, value), output ? _defineProperty({}, keyName, output[keyName]) : {});\n  });\n};\nvar generateId = function generateId() {\n  var d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = function mapIds() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(function (value) {\n    return Object.assign(Object.assign({}, value[keyName] ? {} : _defineProperty({}, keyName, generateId())), value);\n  });\n};\nfunction append(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(data)), _toConsumableArray(convertToArrayPayload(value)));\n}\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return Array.isArray(value) ? value.map(function () {\n    return undefined;\n  }) : undefined;\n};\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(data.slice(index)));\n}\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar omitKeys = function omitKeys(fields, keyName) {\n  return fields.map(function () {\n    var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return omit(field, keyName);\n  });\n};\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(convertToArrayPayload(data)));\n}\nfunction removeAtIndexes(data, indexes) {\n  var i = 0;\n  var temp = _toConsumableArray(data);\n  var _iterator2 = _createForOfIteratorHelper(indexes),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var index = _step2.value;\n      temp.splice(index - i, 1);\n      i++;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort(function (a, b) {\n    return a - b;\n  }));\n};\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar updateAt = function updateAt(fieldValues, index, value) {\n  fieldValues[index] = value;\n  return fieldValues;\n};\nvar useFieldArray = function useFieldArray(props) {\n  var methods = useFormContext();\n  var _props$control2 = props.control,\n    control = _props$control2 === void 0 ? methods.control : _props$control2,\n    name = props.name,\n    _props$keyName = props.keyName,\n    keyName = _props$keyName === void 0 ? 'id' : _props$keyName,\n    shouldUnregister = props.shouldUnregister;\n  var _React$useState5 = React.useState(mapIds(control._getFieldArray(name), keyName)),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    fields = _React$useState6[0],\n    setFields = _React$useState6[1];\n  var _fieldIds = React.useRef(fields);\n  var _name = React.useRef(name);\n  var _actioned = React.useRef(false);\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n  useSubscribe({\n    callback: function callback(_ref5) {\n      var values = _ref5.values,\n        fieldArrayName = _ref5.name;\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array\n  });\n  var updateValues = React.useCallback(function (updatedFieldArrayValuesWithKey) {\n    var updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n  var append$1 = function append$1(value, options) {\n    var appendValue = convertToArrayPayload(value);\n    var updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n    var fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, fieldArrayValues.length - 1, options);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, fieldArrayValues);\n  };\n  var prepend$1 = function prepend$1(value, options) {\n    var updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n    var fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, fieldArrayValues);\n  };\n  var remove = function remove(index) {\n    var updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n    var fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, fieldArrayValues);\n  };\n  var insert$1 = function insert$1(index, value, options) {\n    var updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n    var fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, fieldArrayValues);\n  };\n  var swap = function swap(indexA, indexB) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    var fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldArrayValues, false);\n  };\n  var move = function move(from, to) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    var fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldArrayValues, false);\n  };\n  var update = function update(index, value) {\n    var updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    var updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    var fieldArrayValues = updateValues(_fieldIds.current);\n    setFields(_fieldIds.current);\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, fieldArrayValues, true, false);\n  };\n  var replace = function replace(value) {\n    var updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n    var fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(name, function () {\n      return updatedFieldArrayValuesWithKey;\n    }, {}, fieldArrayValues, true, false);\n  };\n  React.useEffect(function () {\n    control._stateFlags.action = false;\n    isWatched(name, control._names) && control._subjects.state.next({});\n    if (_actioned.current) {\n      control._executeSchema([name]).then(function (result) {\n        var error = get(result.errors, name);\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n    control._subjects.watch.next({\n      name: name,\n      values: control._formValues\n    });\n    control._names.focus && focusFieldBy(control._fields, function (key) {\n      return key.startsWith(control._names.focus);\n    });\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(function () {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return function () {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\nfunction cloneObject(data) {\n  var copy;\n  var isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (var key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nfunction createSubject() {\n  var _observers = [];\n  var next = function next(value) {\n    var _iterator3 = _createForOfIteratorHelper(_observers),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var observer = _step3.value;\n        observer.next(value);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  };\n  var subscribe = function subscribe(observer) {\n    _observers.push(observer);\n    return {\n      unsubscribe: function unsubscribe() {\n        _observers = _observers.filter(function (o) {\n          return o !== observer;\n        });\n      }\n    };\n  };\n  var unsubscribe = function unsubscribe() {\n    _observers = [];\n  };\n  return {\n    get observers() {\n      return _observers;\n    },\n    next: next,\n    subscribe: subscribe,\n    unsubscribe: unsubscribe\n  };\n}\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n  var keys1 = Object.keys(object1);\n  var keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (var _i = 0, _keys = keys1; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    var val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      var val2 = object2[key];\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = function getValidationModes(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched\n  };\n};\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"select-multiple\";\n};\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\nvar isRadioOrCheckbox = function isRadioOrCheckbox(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = function live(ref) {\n  return isHTMLElement(ref) && document.contains(ref);\n};\nfunction baseGet(object, updatePath) {\n  var length = updatePath.slice(0, -1).length;\n  var index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = void 0;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data) || isBoolean(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nfunction markFieldsDirty(data) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isParentNodeArray = Array.isArray(data);\n  if (isObject(data) || isParentNodeArray) {\n    for (var key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n  return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n  var isParentNodeArray = Array.isArray(data);\n  if (isObject(data) || isParentNodeArray) {\n    for (var key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : Object.assign({}, markFieldsDirty(data[key]));\n        } else {\n          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n  return dirtyFieldsFromValues;\n}\nvar getDirtyFields = function getDirtyFields(defaultValues, formValues) {\n  return getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n};\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.checked && !option.disabled;\n      }).map(function (option) {\n        return option.value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = function getFieldValueAs(value, _ref6) {\n  var valueAsNumber = _ref6.valueAsNumber,\n    valueAsDate = _ref6.valueAsDate,\n    setValueAs = _ref6.setValueAs;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nvar defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = function getRadioValue(options) {\n  return Array.isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.checked && !option.disabled ? {\n      isValid: true,\n      value: option.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\nfunction getFieldValue(_f) {\n  var ref = _f.ref;\n  if (_f.refs ? _f.refs.every(function (ref) {\n    return ref.disabled;\n  }) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return _toConsumableArray(ref.selectedOptions).map(function (_ref7) {\n      var value = _ref7.value;\n      return value;\n    });\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = function getResolverOptions(fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) {\n  var fields = {};\n  var _iterator4 = _createForOfIteratorHelper(fieldsNames),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var name = _step4.value;\n      var field = get(_fields, name);\n      field && set(fields, name, field._f);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return {\n    criteriaMode: criteriaMode,\n    names: _toConsumableArray(fieldsNames),\n    fields: fields,\n    shouldUseNativeValidation: shouldUseNativeValidation\n  };\n};\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\nvar getRuleValue = function getRuleValue(rule) {\n  return isUndefined(rule) ? undefined : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;\n};\nvar hasValidation = function hasValidation(options) {\n  return options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n};\nfunction schemaErrorLookup(errors, _fields, name) {\n  var error = get(errors, name);\n  if (error || isKey(name)) {\n    return {\n      error: error,\n      name: name\n    };\n  }\n  var names = name.split('.');\n  while (names.length) {\n    var fieldName = names.join('.');\n    var field = get(_fields, fieldName);\n    var foundError = get(errors, fieldName);\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name: name\n      };\n    }\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n    names.pop();\n  }\n  return {\n    name: name\n  };\n}\nvar skipValidation = function skipValidation(isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = function unsetEmptyArray(ref, name) {\n  return !compact(get(ref, name)).length && unset(ref, name);\n};\nvar isMessage = function isMessage(value) {\n  return isString(value) || React.isValidElement(value);\n};\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isObject(validationData) && !isRegex(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\nvar validateField = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) {\n    var _field$_f, ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, inputRef, setCustomValidity, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref9, value, message, exceedMax, exceedMin, maxOutput, minOutput, valueNumber, valueDate, maxLengthOutput, minLengthOutput, _exceedMax, _exceedMin, _getValueAndMessage, patternValue, _message, result, validateError, validationResult, key, _validateError;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _field$_f = field._f, ref = _field$_f.ref, refs = _field$_f.refs, required = _field$_f.required, maxLength = _field$_f.maxLength, minLength = _field$_f.minLength, min = _field$_f.min, max = _field$_f.max, pattern = _field$_f.pattern, validate = _field$_f.validate, name = _field$_f.name, valueAsNumber = _field$_f.valueAsNumber, mount = _field$_f.mount, disabled = _field$_f.disabled;\n            if (!(!mount || disabled)) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt(\"return\", {});\n          case 3:\n            inputRef = refs ? refs[0] : ref;\n            setCustomValidity = function setCustomValidity(message) {\n              if (shouldUseNativeValidation && inputRef.reportValidity) {\n                inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n                inputRef.reportValidity();\n              }\n            };\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n            };\n            if (!(required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid))) {\n              _context.next = 19;\n              break;\n            }\n            _ref9 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), value = _ref9.value, message = _ref9.message;\n            if (!value) {\n              _context.next = 19;\n              break;\n            }\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: message,\n              ref: inputRef\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n            if (validateAllFieldCriteria) {\n              _context.next = 19;\n              break;\n            }\n            setCustomValidity(message);\n            return _context.abrupt(\"return\", error);\n          case 19:\n            if (!(!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max)))) {\n              _context.next = 28;\n              break;\n            }\n            maxOutput = getValueAndMessage(max);\n            minOutput = getValueAndMessage(min);\n            if (!isNaN(inputValue)) {\n              valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n              if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n              }\n              if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(inputValue);\n              if (isString(maxOutput.value)) {\n                exceedMax = valueDate > new Date(maxOutput.value);\n              }\n              if (isString(minOutput.value)) {\n                exceedMin = valueDate < new Date(minOutput.value);\n              }\n            }\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 28;\n              break;\n            }\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (validateAllFieldCriteria) {\n              _context.next = 28;\n              break;\n            }\n            setCustomValidity(error[name].message);\n            return _context.abrupt(\"return\", error);\n          case 28:\n            if (!((maxLength || minLength) && !isEmpty && isString(inputValue))) {\n              _context.next = 38;\n              break;\n            }\n            maxLengthOutput = getValueAndMessage(maxLength);\n            minLengthOutput = getValueAndMessage(minLength);\n            _exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n            _exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 38;\n              break;\n            }\n            getMinMaxMessage(_exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (validateAllFieldCriteria) {\n              _context.next = 38;\n              break;\n            }\n            setCustomValidity(error[name].message);\n            return _context.abrupt(\"return\", error);\n          case 38:\n            if (!(pattern && !isEmpty && isString(inputValue))) {\n              _context.next = 45;\n              break;\n            }\n            _getValueAndMessage = getValueAndMessage(pattern), patternValue = _getValueAndMessage.value, _message = _getValueAndMessage.message;\n            if (!(isRegex(patternValue) && !inputValue.match(patternValue))) {\n              _context.next = 45;\n              break;\n            }\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: _message,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, _message));\n            if (validateAllFieldCriteria) {\n              _context.next = 45;\n              break;\n            }\n            setCustomValidity(_message);\n            return _context.abrupt(\"return\", error);\n          case 45:\n            if (!validate) {\n              _context.next = 79;\n              break;\n            }\n            if (!isFunction(validate)) {\n              _context.next = 58;\n              break;\n            }\n            _context.next = 49;\n            return validate(inputValue);\n          case 49:\n            result = _context.sent;\n            validateError = getValidateError(result, inputRef);\n            if (!validateError) {\n              _context.next = 56;\n              break;\n            }\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n            if (validateAllFieldCriteria) {\n              _context.next = 56;\n              break;\n            }\n            setCustomValidity(validateError.message);\n            return _context.abrupt(\"return\", error);\n          case 56:\n            _context.next = 79;\n            break;\n          case 58:\n            if (!isObject(validate)) {\n              _context.next = 79;\n              break;\n            }\n            validationResult = {};\n            _context.t0 = _regeneratorRuntime.keys(validate);\n          case 61:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 75;\n              break;\n            }\n            key = _context.t1.value;\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 65;\n              break;\n            }\n            return _context.abrupt(\"break\", 75);\n          case 65:\n            _context.t2 = getValidateError;\n            _context.next = 68;\n            return validate[key](inputValue);\n          case 68:\n            _context.t3 = _context.sent;\n            _context.t4 = inputRef;\n            _context.t5 = key;\n            _validateError = (0, _context.t2)(_context.t3, _context.t4, _context.t5);\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n              setCustomValidity(_validateError.message);\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n            _context.next = 61;\n            break;\n          case 75:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 79;\n              break;\n            }\n            error[name] = Object.assign({\n              ref: inputRef\n            }, validationResult);\n            if (validateAllFieldCriteria) {\n              _context.next = 79;\n              break;\n            }\n            return _context.abrupt(\"return\", error);\n          case 79:\n            setCustomValidity(true);\n            return _context.abrupt(\"return\", error);\n          case 81:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nvar defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nfunction createFormControl() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options = Object.assign(Object.assign({}, defaultOptions), props);\n  var _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  var _fields = {};\n  var _defaultValues = _options.defaultValues || {};\n  var _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n  var _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  var _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  var delayErrorCallback;\n  var timer = 0;\n  var validateFields = {};\n  var _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  var _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  var validationModeBeforeSubmit = getValidationModes(_options.mode);\n  var validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  var shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n  var debounce = function debounce(callback, wait) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      clearTimeout(timer);\n      timer = window.setTimeout(function () {\n        return callback.apply(void 0, args);\n      }, wait);\n    };\n  };\n  var _updateValid = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(shouldSkipRender) {\n      var isValid;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              isValid = false;\n              if (!_proxyFormState.isValid) {\n                _context2.next = 15;\n                break;\n              }\n              if (!_options.resolver) {\n                _context2.next = 10;\n                break;\n              }\n              _context2.t1 = isEmptyObject;\n              _context2.next = 6;\n              return _executeSchema();\n            case 6:\n              _context2.t2 = _context2.sent.errors;\n              _context2.t0 = (0, _context2.t1)(_context2.t2);\n              _context2.next = 13;\n              break;\n            case 10:\n              _context2.next = 12;\n              return executeBuildInValidation(_fields, true);\n            case 12:\n              _context2.t0 = _context2.sent;\n            case 13:\n              isValid = _context2.t0;\n              if (!shouldSkipRender && isValid !== _formState.isValid) {\n                _formState.isValid = isValid;\n                _subjects.state.next({\n                  isValid: isValid\n                });\n              }\n            case 15:\n              return _context2.abrupt(\"return\", isValid);\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function _updateValid(_x5) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  var _updateFieldArray = function _updateFieldArray(name, method, args) {\n    var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n    if (shouldSetFields && get(_fields, name)) {\n      var fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n    if (Array.isArray(get(_formState.errors, name))) {\n      var errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      var touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n  var updateErrors = function updateErrors(name, error) {\n    return set(_formState.errors, name, error), _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n  var updateValidAndValue = function updateValidAndValue(name, shouldSkipSetValueAs, ref) {\n    var field = get(_fields, name);\n    if (field) {\n      var defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n    _stateFlags.mount && _updateValid();\n  };\n  var updateTouchAndDirty = function updateTouchAndDirty(name, fieldValue, isCurrentTouched) {\n    var shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var isFieldDirty = false;\n    var output = {\n      name: name\n    };\n    var isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (_proxyFormState.isDirty) {\n      var isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      var isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      var isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n  var shouldRenderByError = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(shouldSkipRender, name, isValid, error, fieldState) {\n      var previousFieldError, shouldUpdateValid, updatedFormState;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              previousFieldError = get(_formState.errors, name);\n              shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n              if (props.delayError && error) {\n                delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n                delayErrorCallback(name, error);\n              } else {\n                clearTimeout(timer);\n                error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n              }\n              if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n                updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n                  isValid: isValid\n                } : {}), {\n                  errors: _formState.errors,\n                  name: name\n                });\n                _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n                _subjects.state.next(updatedFormState);\n              }\n              validateFields[name]--;\n              if (_proxyFormState.isValidating && !validateFields[name]) {\n                _subjects.state.next({\n                  isValidating: false\n                });\n                validateFields = {};\n              }\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return function shouldRenderByError(_x6, _x7, _x8, _x9, _x10) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n  var _executeSchema = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!_options.resolver) {\n                _context4.next = 6;\n                break;\n              }\n              _context4.next = 3;\n              return _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n            case 3:\n              _context4.t0 = _context4.sent;\n              _context4.next = 7;\n              break;\n            case 6:\n              _context4.t0 = {};\n            case 7:\n              return _context4.abrupt(\"return\", _context4.t0);\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return function _executeSchema(_x11) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n  var executeSchemaAndUpdateState = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(names) {\n      var _yield$_executeSchema, errors, _iterator5, _step5, _name2, _error;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _executeSchema();\n            case 2:\n              _yield$_executeSchema = _context5.sent;\n              errors = _yield$_executeSchema.errors;\n              if (names) {\n                _iterator5 = _createForOfIteratorHelper(names);\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    _name2 = _step5.value;\n                    _error = get(errors, _name2);\n                    _error ? set(_formState.errors, _name2, _error) : unset(_formState.errors, _name2);\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              } else {\n                _formState.errors = errors;\n              }\n              return _context5.abrupt(\"return\", errors);\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return function executeSchemaAndUpdateState(_x12) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n  var executeBuildInValidation = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(fields, shouldOnlyCheckValid) {\n      var context,\n        _name3,\n        field,\n        fieldReference,\n        fieldValue,\n        fieldError,\n        _args6 = arguments;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              context = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {\n                valid: true\n              };\n              _context6.t0 = _regeneratorRuntime.keys(fields);\n            case 2:\n              if ((_context6.t1 = _context6.t0()).done) {\n                _context6.next = 23;\n                break;\n              }\n              _name3 = _context6.t1.value;\n              field = fields[_name3];\n              if (!field) {\n                _context6.next = 21;\n                break;\n              }\n              fieldReference = field._f;\n              fieldValue = omit(field, '_f');\n              if (!fieldReference) {\n                _context6.next = 17;\n                break;\n              }\n              _context6.next = 11;\n              return validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n            case 11:\n              fieldError = _context6.sent;\n              if (!fieldError[fieldReference.name]) {\n                _context6.next = 16;\n                break;\n              }\n              context.valid = false;\n              if (!shouldOnlyCheckValid) {\n                _context6.next = 16;\n                break;\n              }\n              return _context6.abrupt(\"break\", 23);\n            case 16:\n              if (!shouldOnlyCheckValid) {\n                fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n              }\n            case 17:\n              _context6.t2 = fieldValue;\n              if (!_context6.t2) {\n                _context6.next = 21;\n                break;\n              }\n              _context6.next = 21;\n              return executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context);\n            case 21:\n              _context6.next = 2;\n              break;\n            case 23:\n              return _context6.abrupt(\"return\", context.valid);\n            case 24:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return function executeBuildInValidation(_x13, _x14) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n  var _removeUnmounted = function _removeUnmounted() {\n    var _iterator6 = _createForOfIteratorHelper(_names.unMount),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var _name4 = _step6.value;\n        var field = get(_fields, _name4);\n        field && (field._f.refs ? field._f.refs.every(function (ref) {\n          return !live(ref);\n        }) : !live(field._f.ref)) && unregister(_name4);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n    _names.unMount = new Set();\n  };\n  var _getDirty = function _getDirty(name, data) {\n    return name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues);\n  };\n  var _getWatch = function _getWatch(names, defaultValue, isGlobal) {\n    var fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? _defineProperty({}, names, defaultValue) : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n  var _getFieldArray = function _getFieldArray(name) {\n    return get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n  };\n  var setFieldValue = function setFieldValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var field = get(_fields, name);\n    var fieldValue = value;\n    if (field) {\n      var fieldReference = field._f;\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isMultipleSelect(fieldReference.ref)) {\n          _toConsumableArray(fieldReference.ref.options).forEach(function (selectRef) {\n            return selectRef.selected = fieldValue.includes(selectRef.value);\n          });\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(function (checkboxRef) {\n              return checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(function (data) {\n                return data === checkboxRef.value;\n              }) : fieldValue === checkboxRef.value;\n            }) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(function (radioRef) {\n              return radioRef.checked = radioRef.value === fieldValue;\n            });\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n  var setValues = function setValues(name, value, options) {\n    for (var fieldKey in value) {\n      var fieldValue = value[fieldKey];\n      var fieldName = \"\".concat(name, \".\").concat(fieldKey);\n      var field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n  var setValue = function setValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var field = get(_fields, name);\n    var isFieldArray = _names.array.has(name);\n    set(_formValues, name, value);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name: name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n        _subjects.state.next({\n          name: name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options);\n    }\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name: name\n    });\n  };\n  var onChange = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(event) {\n      var target, name, field, _error2, isValid, fieldValue, isBlurEvent, shouldSkipValidation, watched, fieldState, shouldRender, _yield$_executeSchema2, errors, previousErrorLookupResult, errorLookupResult;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              target = event.target;\n              name = target.name;\n              field = get(_fields, name);\n              if (!field) {\n                _context7.next = 39;\n                break;\n              }\n              fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);\n              isBlurEvent = event.type === EVENTS.BLUR;\n              shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n              watched = isWatched(name, _names, isBlurEvent);\n              if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n              } else if (field._f.onChange) {\n                field._f.onChange(event);\n              }\n              set(_formValues, name, fieldValue);\n              fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n              shouldRender = !isEmptyObject(fieldState) || watched;\n              !isBlurEvent && _subjects.watch.next({\n                name: name,\n                type: event.type\n              });\n              if (!shouldSkipValidation) {\n                _context7.next = 15;\n                break;\n              }\n              return _context7.abrupt(\"return\", shouldRender && _subjects.state.next(Object.assign({\n                name: name\n              }, watched ? {} : fieldState)));\n            case 15:\n              !isBlurEvent && watched && _subjects.state.next({});\n              validateFields[name] = validateFields[name] ? +1 : 1;\n              _proxyFormState.isValidating && _subjects.state.next({\n                isValidating: true\n              });\n              if (!_options.resolver) {\n                _context7.next = 30;\n                break;\n              }\n              _context7.next = 21;\n              return _executeSchema([name]);\n            case 21:\n              _yield$_executeSchema2 = _context7.sent;\n              errors = _yield$_executeSchema2.errors;\n              previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n              errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n              _error2 = errorLookupResult.error;\n              name = errorLookupResult.name;\n              isValid = isEmptyObject(errors);\n              _context7.next = 37;\n              break;\n            case 30:\n              _context7.next = 32;\n              return validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n            case 32:\n              _context7.t0 = name;\n              _error2 = _context7.sent[_context7.t0];\n              _context7.next = 36;\n              return _updateValid(true);\n            case 36:\n              isValid = _context7.sent;\n            case 37:\n              field._f.deps && trigger(field._f.deps);\n              shouldRenderByError(false, name, isValid, _error2, fieldState);\n            case 39:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return function onChange(_x15) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n  var trigger = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(name) {\n      var options,\n        isValid,\n        validationResult,\n        fieldNames,\n        errors,\n        _args9 = arguments;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n              fieldNames = convertToArrayPayload(name);\n              _subjects.state.next({\n                isValidating: true\n              });\n              if (!_options.resolver) {\n                _context9.next = 11;\n                break;\n              }\n              _context9.next = 6;\n              return executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            case 6:\n              errors = _context9.sent;\n              isValid = isEmptyObject(errors);\n              validationResult = name ? !fieldNames.some(function (name) {\n                return get(errors, name);\n              }) : isValid;\n              _context9.next = 21;\n              break;\n            case 11:\n              if (!name) {\n                _context9.next = 18;\n                break;\n              }\n              _context9.next = 14;\n              return Promise.all(fieldNames.map( /*#__PURE__*/function () {\n                var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(fieldName) {\n                  var field;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          field = get(_fields, fieldName);\n                          _context8.next = 3;\n                          return executeBuildInValidation(field && field._f ? _defineProperty({}, fieldName, field) : field);\n                        case 3:\n                          return _context8.abrupt(\"return\", _context8.sent);\n                        case 4:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n                return function (_x17) {\n                  return _ref18.apply(this, arguments);\n                };\n              }()));\n            case 14:\n              validationResult = _context9.sent.every(Boolean);\n              !(!validationResult && !_formState.isValid) && _updateValid();\n              _context9.next = 21;\n              break;\n            case 18:\n              _context9.next = 20;\n              return executeBuildInValidation(_fields);\n            case 20:\n              validationResult = isValid = _context9.sent;\n            case 21:\n              _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n                name: name\n              }), _options.resolver ? {\n                isValid: isValid\n              } : {}), {\n                errors: _formState.errors,\n                isValidating: false\n              }));\n              options.shouldFocus && !validationResult && focusFieldBy(_fields, function (key) {\n                return get(_formState.errors, key);\n              }, name ? fieldNames : _names.mount);\n              return _context9.abrupt(\"return\", validationResult);\n            case 24:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return function trigger(_x16) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n  var getValues = function getValues(fieldNames) {\n    var values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(function (name) {\n      return get(values, name);\n    });\n  };\n  var clearErrors = function clearErrors(name) {\n    name ? convertToArrayPayload(name).forEach(function (inputName) {\n      return unset(_formState.errors, inputName);\n    }) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n  var setError = function setError(name, error, options) {\n    var ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref: ref\n    }));\n    _subjects.state.next({\n      name: name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  var watch = function watch(name, defaultValue) {\n    return isFunction(name) ? _subjects.watch.subscribe({\n      next: function next(info) {\n        return name(_getWatch(undefined, defaultValue), info);\n      }\n    }) : _getWatch(name, defaultValue, true);\n  };\n  var unregister = function unregister(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _iterator7 = _createForOfIteratorHelper(name ? convertToArrayPayload(name) : _names.mount),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var fieldName = _step7.value;\n        _names.mount.delete(fieldName);\n        _names.array.delete(fieldName);\n        if (get(_fields, fieldName)) {\n          if (!options.keepValue) {\n            unset(_fields, fieldName);\n            unset(_formValues, fieldName);\n          }\n          !options.keepError && unset(_formState.errors, fieldName);\n          !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n          !options.keepTouched && unset(_formState.touchedFields, fieldName);\n          !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  var register = function register(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name: name\n        }\n      }), {\n        name: name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    !isUndefined(options.value) && !options.disabled && set(_formValues, name, get(_formValues, name, options.value));\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return Object.assign(Object.assign(Object.assign({}, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), _options.shouldUseNativeValidation ? {\n      required: !!options.required,\n      min: getRuleValue(options.min),\n      max: getRuleValue(options.max),\n      minLength: getRuleValue(options.minLength),\n      maxLength: getRuleValue(options.maxLength),\n      pattern: getRuleValue(options.pattern)\n    } : {}), {\n      name: name,\n      onChange: onChange,\n      onBlur: onChange,\n      ref: function (_ref20) {\n        function ref(_x18) {\n          return _ref20.apply(this, arguments);\n        }\n        ref.toString = function () {\n          return _ref20.toString();\n        };\n        return ref;\n      }(function (ref) {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n          var fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          var radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          if (fieldRef === field._f.ref || radioOrCheckbox && compact(field._f.refs).find(function (option) {\n            return option === fieldRef;\n          })) {\n            return;\n          }\n          set(_fields, name, {\n            _f: radioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [].concat(_toConsumableArray(compact(field._f.refs).filter(live)), [fieldRef]),\n              ref: {\n                type: fieldRef.type,\n                name: name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          });\n          !options.disabled && updateValidAndValue(name, false, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n          if (field._f) {\n            field._f.mount = false;\n          }\n          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      })\n    });\n  };\n  var handleSubmit = function handleSubmit(onValid, onInvalid) {\n    return /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(e) {\n        var hasNoPromiseError, fieldValues, _yield$_executeSchema3, errors, values;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (e) {\n                  e.preventDefault && e.preventDefault();\n                  e.persist && e.persist();\n                }\n                hasNoPromiseError = true;\n                fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n                _subjects.state.next({\n                  isSubmitting: true\n                });\n                _context10.prev = 4;\n                if (!_options.resolver) {\n                  _context10.next = 15;\n                  break;\n                }\n                _context10.next = 8;\n                return _executeSchema();\n              case 8:\n                _yield$_executeSchema3 = _context10.sent;\n                errors = _yield$_executeSchema3.errors;\n                values = _yield$_executeSchema3.values;\n                _formState.errors = errors;\n                fieldValues = values;\n                _context10.next = 17;\n                break;\n              case 15:\n                _context10.next = 17;\n                return executeBuildInValidation(_fields);\n              case 17:\n                if (!(isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(function (name) {\n                  return get(fieldValues, name);\n                }))) {\n                  _context10.next = 23;\n                  break;\n                }\n                _subjects.state.next({\n                  errors: {},\n                  isSubmitting: true\n                });\n                _context10.next = 21;\n                return onValid(fieldValues, e);\n              case 21:\n                _context10.next = 28;\n                break;\n              case 23:\n                _context10.t0 = onInvalid;\n                if (!_context10.t0) {\n                  _context10.next = 27;\n                  break;\n                }\n                _context10.next = 27;\n                return onInvalid(_formState.errors, e);\n              case 27:\n                _options.shouldFocusError && focusFieldBy(_fields, function (key) {\n                  return get(_formState.errors, key);\n                }, _names.mount);\n              case 28:\n                _context10.next = 34;\n                break;\n              case 30:\n                _context10.prev = 30;\n                _context10.t1 = _context10[\"catch\"](4);\n                hasNoPromiseError = false;\n                throw _context10.t1;\n              case 34:\n                _context10.prev = 34;\n                _formState.isSubmitted = true;\n                _subjects.state.next({\n                  isSubmitted: true,\n                  isSubmitting: false,\n                  isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n                  submitCount: _formState.submitCount + 1,\n                  errors: _formState.errors\n                });\n                return _context10.finish(34);\n              case 38:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[4, 30, 34, 38]]);\n      }));\n      return function (_x19) {\n        return _ref21.apply(this, arguments);\n      };\n    }();\n  };\n  var resetField = function resetField(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n    }\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n    _subjects.state.next(Object.assign({}, _formState));\n  };\n  var reset = function reset(formValues) {\n    var keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var updatedValues = formValues || _defaultValues;\n    var cloneUpdatedValues = cloneObject(updatedValues);\n    var values = !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        var _iterator8 = _createForOfIteratorHelper(_names.mount),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var _name5 = _step8.value;\n            var field = get(_fields, _name5);\n            if (field && field._f) {\n              var fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n              try {\n                isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n                break;\n              } catch (_a) {}\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n      _subjects.watch.next({\n        values: values\n      });\n      _subjects.array.next({\n        values: values\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce(function (previous, _ref22) {\n        var _ref23 = _slicedToArray(_ref22, 2),\n          key = _ref23[0],\n          value = _ref23[1];\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, key, value !== get(_defaultValues, key)));\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n  var setFocus = function setFocus(name) {\n    var field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n  return {\n    control: {\n      register: register,\n      unregister: unregister,\n      _executeSchema: _executeSchema,\n      _getWatch: _getWatch,\n      _getDirty: _getDirty,\n      _updateValid: _updateValid,\n      _removeUnmounted: _removeUnmounted,\n      _updateFieldArray: _updateFieldArray,\n      _getFieldArray: _getFieldArray,\n      _subjects: _subjects,\n      _proxyFormState: _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n    },\n    trigger: trigger,\n    register: register,\n    handleSubmit: handleSubmit,\n    watch: watch,\n    setValue: setValue,\n    getValues: getValues,\n    reset: reset,\n    resetField: resetField,\n    clearErrors: clearErrors,\n    unregister: unregister,\n    setError: setError,\n    setFocus: setFocus\n  };\n}\nfunction useForm() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _formControl = React.useRef();\n  var _React$useState7 = React.useState({\n      isDirty: false,\n      isValidating: false,\n      dirtyFields: {},\n      isSubmitted: false,\n      submitCount: 0,\n      touchedFields: {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      isValid: false,\n      errors: {}\n    }),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    formState = _React$useState8[0],\n    updateFormState = _React$useState8[1];\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState: formState\n    });\n  }\n  var control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: function callback(value) {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), value);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(function () {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isFunction.ts","../src/utils/objectHasFunction.ts","../src/useWatch.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getDirtyFields.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/utils/isRegex.ts","../src/logic/getRuleValue.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts"],"names":["append","appendAt","prepend","prependAt","insert","insertAt","isCheckBox"],"mappings":"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","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => (value || []).filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (value) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import * as React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(\n      name,\n      fieldArrayValues.length - 1,\n      options,\n    );\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      fieldArrayValues,\n    );\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldArrayValues,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds<TFieldValues, TFieldArrayName, TKeyName>(\n      updatedFieldArrayValues,\n      keyName,\n    );\n    const fieldArrayValues = updateValues(_fieldIds.current);\n\n    setFields(_fieldIds.current);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      fieldArrayValues,\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapIds<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >(convertToArrayPayload(value) as Partial<TFieldValues>[], keyName);\n    const fieldArrayValues = updateValues(updatedFieldArrayValuesWithKey);\n\n    setFields(updatedFieldArrayValuesWithKey);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      fieldArrayValues,\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (!isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return {\n      ...(isBoolean(options.disabled) ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n\n          if (\n            fieldRef === field._f.ref ||\n            (radioOrCheckbox &&\n              compact(field._f.refs).find((option) => option === fieldRef))\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: radioOrCheckbox\n              ? {\n                  ...field._f,\n                  refs: [...compact(field._f.refs).filter(live), fieldRef],\n                  ref: { type: fieldRef.type, name },\n                }\n              : {\n                  ...field._f,\n                  ref: fieldRef,\n                },\n          });\n\n          !options.disabled && updateValidAndValue(name, false, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"]},"metadata":{},"sourceType":"module"}